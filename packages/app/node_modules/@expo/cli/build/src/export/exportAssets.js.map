{"version":3,"sources":["../../../src/export/exportAssets.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport fs from 'fs';\nimport minimatch from 'minimatch';\nimport path from 'path';\n\nimport { BundleOutput } from './fork-bundleAsync';\nimport { persistMetroAssetsAsync } from './persistMetroAssets';\nimport { Asset, ExportAssetMap } from './saveAssets';\nimport * as Log from '../log';\nimport { resolveGoogleServicesFile } from '../start/server/middleware/resolveAssets';\nimport { uniqBy } from '../utils/array';\n\nconst debug = require('debug')('expo:export:exportAssets') as typeof console.log;\n\nfunction mapAssetHashToAssetString(asset: Asset, hash: string) {\n  return 'asset_' + hash + ('type' in asset && asset.type ? '.' + asset.type : '');\n}\n\nexport function assetPatternsToBeBundled(\n  exp: ExpoConfig & { extra?: { updates?: { assetPatternsToBeBundled?: string[] } } }\n): string[] | undefined {\n  return exp?.extra?.updates?.assetPatternsToBeBundled?.length\n    ? exp?.extra?.updates?.assetPatternsToBeBundled\n    : undefined;\n}\n\n/**\n * Given an asset and a set of strings representing the assets to be bundled, returns true if\n * the asset is part of the set to be bundled.\n * @param asset Asset object\n * @param bundledAssetsSet Set of strings\n * @returns true if the asset should be bundled\n */\nfunction assetShouldBeIncludedInExport(asset: Asset, bundledAssetsSet: Set<string> | undefined) {\n  if (!bundledAssetsSet) {\n    return true;\n  }\n  return (\n    asset.fileHashes.filter((hash) => bundledAssetsSet.has(mapAssetHashToAssetString(asset, hash)))\n      .length > 0\n  );\n}\n\n/**\n * Computes a set of strings representing the assets to be bundled with an export, given an array of assets,\n * and a set of patterns to match\n * @param assets The asset array\n * @param assetPatternsToBeBundled An array of strings with glob patterns to match\n * @param projectRoot The project root\n * @returns A set of asset strings\n */\nfunction setOfAssetsToBeBundled(\n  assets: Asset[],\n  assetPatternsToBeBundled: string[],\n  projectRoot: string\n): Set<string> | undefined {\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n\n  const fullPatterns: string[] = assetPatternsToBeBundled.map((p: string) =>\n    path.join(projectRoot, p)\n  );\n\n  logPatterns(fullPatterns);\n\n  const allBundledAssets = assets\n    .map((asset) => {\n      const shouldBundle = shouldBundleAsset(asset, fullPatterns);\n      if (shouldBundle) {\n        debug(`${shouldBundle ? 'Include' : 'Exclude'} asset ${asset.files?.[0]}`);\n        return asset.fileHashes.map((hash) => mapAssetHashToAssetString(asset, hash));\n      }\n      return [];\n    })\n    .flat();\n\n  // The assets returned by the RN packager has duplicates so make sure we\n  // only bundle each once.\n  return new Set(allBundledAssets);\n}\n\n/**\n * Resolves the assetBundlePatterns from the manifest and returns the set of assets to bundle.\n *\n * @modifies {exp}\n */\nexport function resolveAssetPatternsToBeBundled<T extends ExpoConfig>(\n  projectRoot: string,\n  exp: T,\n  assets: Asset[]\n): Set<string> | undefined {\n  if (!assetPatternsToBeBundled(exp)) {\n    return undefined;\n  }\n  const bundledAssets = setOfAssetsToBeBundled(\n    assets,\n    assetPatternsToBeBundled(exp) ?? ['**/*'],\n    projectRoot\n  );\n  return bundledAssets;\n}\n\nfunction logPatterns(patterns: string[]) {\n  // Only log the patterns in debug mode, if they aren't already defined in the app.json, then all files will be targeted.\n  Log.log('\\nProcessing asset bundle patterns:');\n  patterns.forEach((p) => Log.log('- ' + p));\n}\n\nfunction shouldBundleAsset(asset: Asset, patterns: string[]) {\n  const file = asset.files?.[0];\n  return !!(\n    '__packager_asset' in asset &&\n    asset.__packager_asset &&\n    file &&\n    patterns.some((pattern) => minimatch(file, pattern))\n  );\n}\n\nexport async function exportAssetsAsync(\n  projectRoot: string,\n  {\n    exp,\n    outputDir,\n    bundles: { web, ...bundles },\n    baseUrl,\n    files = new Map(),\n  }: {\n    exp: ExpoConfig;\n    bundles: Partial<Record<string, BundleOutput>>;\n    outputDir: string;\n    baseUrl: string;\n    files?: ExportAssetMap;\n  }\n) {\n  // NOTE: We use a different system for static web\n  if (web) {\n    // Save assets like a typical bundler, preserving the file paths on web.\n    // TODO: Update React Native Web to support loading files from asset hashes.\n    await persistMetroAssetsAsync(web.assets, {\n      files,\n      platform: 'web',\n      outputDirectory: outputDir,\n      baseUrl,\n    });\n  }\n\n  const assets: Asset[] = uniqBy(\n    Object.values(bundles).flatMap((bundle) => bundle!.assets),\n    (asset) => asset.hash\n  );\n\n  let bundledAssetsSet: Set<string> | undefined = undefined;\n  let filteredAssets = assets;\n  const embeddedHashSet: Set<string> = new Set();\n\n  if (assets[0]?.fileHashes) {\n    debug(`Assets = ${JSON.stringify(assets, null, 2)}`);\n    // Updates the manifest to reflect additional asset bundling + configs\n    // Get only asset strings for assets we will save\n    bundledAssetsSet = resolveAssetPatternsToBeBundled(projectRoot, exp, assets);\n    if (bundledAssetsSet) {\n      debug(`Bundled assets = ${JSON.stringify([...bundledAssetsSet], null, 2)}`);\n      // Filter asset objects to only ones that include assetPatternsToBeBundled matches\n      filteredAssets = assets.filter((asset) => {\n        const shouldInclude = assetShouldBeIncludedInExport(asset, bundledAssetsSet);\n        if (!shouldInclude) {\n          embeddedHashSet.add(asset.hash);\n        }\n        return shouldInclude;\n      });\n      debug(`Filtered assets count = ${filteredAssets.length}`);\n    }\n\n    const hashes = new Set<string>();\n\n    // Add assets to copy.\n    filteredAssets.forEach((asset) => {\n      const assetId =\n        'fileSystemLocation' in asset\n          ? path.relative(projectRoot, path.join(asset.fileSystemLocation, asset.name)) +\n            (asset.type ? '.' + asset.type : '')\n          : undefined;\n\n      asset.files.forEach((fp: string, index: number) => {\n        const hash = asset.fileHashes[index];\n        if (hashes.has(hash)) return;\n        hashes.add(hash);\n        files.set(path.join('assets', hash), {\n          originFilename: path.relative(projectRoot, fp),\n          contents: fs.readFileSync(fp),\n          assetId,\n        });\n      });\n    });\n  }\n\n  // Add google services file if it exists\n  await resolveGoogleServicesFile(projectRoot, exp);\n\n  return { exp, assets, embeddedHashSet, files };\n}\n"],"names":["assetPatternsToBeBundled","resolveAssetPatternsToBeBundled","exportAssetsAsync","Log","debug","require","mapAssetHashToAssetString","asset","hash","type","exp","extra","updates","length","undefined","assetShouldBeIncludedInExport","bundledAssetsSet","fileHashes","filter","has","setOfAssetsToBeBundled","assets","projectRoot","fullPatterns","map","p","path","join","logPatterns","allBundledAssets","shouldBundle","shouldBundleAsset","files","flat","Set","bundledAssets","patterns","log","forEach","file","__packager_asset","some","pattern","minimatch","outputDir","bundles","web","baseUrl","Map","persistMetroAssetsAsync","platform","outputDirectory","uniqBy","Object","values","flatMap","bundle","filteredAssets","embeddedHashSet","JSON","stringify","shouldInclude","add","hashes","assetId","relative","fileSystemLocation","name","fp","index","set","originFilename","contents","fs","readFileSync","resolveGoogleServicesFile"],"mappings":"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"}