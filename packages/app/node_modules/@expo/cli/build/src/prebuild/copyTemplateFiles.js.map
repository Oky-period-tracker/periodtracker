{"version":3,"sources":["../../../src/prebuild/copyTemplateFiles.ts"],"sourcesContent":["import { ModPlatform } from '@expo/config-plugins';\nimport { MergeResults } from '@expo/config-plugins/build/utils/generateCode';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { copySync } from '../utils/dir';\nimport { mergeGitIgnorePaths } from '../utils/mergeGitIgnorePaths';\n\nconst debug = require('debug')('expo:prebuild:copyTemplateFiles') as typeof console.log;\n\ntype CopyFilesResults = {\n  /** Merge results for the root `.gitignore` file */\n  gitignore: MergeResults | null;\n  /** List of file paths that were copied from the template into the project. */\n  copiedPaths: string[];\n  /** List of file paths that were skipped due to a number of factors. */\n  skippedPaths: string[];\n};\n\n/**\n * Return true if the given platforms all have an internal `.gitignore` file.\n *\n * @param projectRoot\n * @param platforms\n */\nfunction hasAllPlatformSpecificGitIgnores(projectRoot: string, platforms: ModPlatform[]): boolean {\n  return platforms.reduce<boolean>(\n    (p, platform) => p && fs.existsSync(path.join(projectRoot, platform, '.gitignore')),\n    true\n  );\n}\n\n/** Create a custom log message based on the copy file results. */\nexport function createCopyFilesSuccessMessage(\n  platforms: ModPlatform[],\n  { skippedPaths, gitignore }: CopyFilesResults\n): string {\n  const pluralized = platforms.length > 1 ? 'directories' : 'directory';\n  let message = `Created native ${pluralized}`;\n\n  if (skippedPaths.length) {\n    message += chalk.dim(\n      ` | reusing ${skippedPaths.map((path) => chalk.bold(`/${path}`)).join(', ')}`\n    );\n  }\n  if (!gitignore) {\n    // Add no additional message...\n  } else if (!gitignore.didMerge) {\n    message += chalk.dim(` | reusing gitignore`);\n  } else if (gitignore.didMerge && gitignore.didClear) {\n    // This is legacy and for non-standard templates. The Expo template adds gitignores to the platform folders.\n    message += chalk.dim(` | updated gitignore`);\n  }\n  return message;\n}\n\n/** Copy template files into the project and possibly merge the `.gitignore` files.  */\nexport function copyTemplateFiles(\n  projectRoot: string,\n  {\n    templateDirectory,\n    platforms,\n  }: {\n    /** File path to the template directory. */\n    templateDirectory: string;\n    /** List of platforms to copy against. */\n    platforms: ModPlatform[];\n  }\n): CopyFilesResults {\n  const copiedPaths: string[] = [];\n  const skippedPaths: string[] = [];\n\n  platforms.forEach((copyFilePath) => {\n    const projectPath = path.join(projectRoot, copyFilePath);\n    if (fs.existsSync(projectPath)) {\n      skippedPaths.push(copyFilePath);\n    } else {\n      copiedPaths.push(copyFilePath);\n      copySync(path.join(templateDirectory, copyFilePath), projectPath);\n    }\n  });\n\n  const hasPlatformSpecificGitIgnores = hasAllPlatformSpecificGitIgnores(\n    templateDirectory,\n    platforms\n  );\n  debug(`All platforms have an internal gitignore: ${hasPlatformSpecificGitIgnores}`);\n\n  // TODO: Remove gitignore modifications -- maybe move to `npx expo-doctor`\n  const gitignore = hasPlatformSpecificGitIgnores\n    ? null\n    : mergeGitIgnorePaths(\n        path.join(projectRoot, '.gitignore'),\n        path.join(templateDirectory, '.gitignore')\n      );\n\n  return { copiedPaths, skippedPaths, gitignore };\n}\n"],"names":["createCopyFilesSuccessMessage","copyTemplateFiles","debug","require","hasAllPlatformSpecificGitIgnores","projectRoot","platforms","reduce","p","platform","fs","existsSync","path","join","skippedPaths","gitignore","pluralized","length","message","chalk","dim","map","bold","didMerge","didClear","templateDirectory","copiedPaths","forEach","copyFilePath","projectPath","push","copySync","hasPlatformSpecificGitIgnores","mergeGitIgnorePaths"],"mappings":"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"}