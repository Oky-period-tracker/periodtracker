{"version":3,"sources":["../../../../../src/start/server/metro/withMetroResolvers.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport chalk from 'chalk';\nimport { ConfigT as MetroConfig } from 'metro-config';\nimport type { ResolutionContext, CustomResolutionContext } from 'metro-resolver';\nimport * as metroResolver from 'metro-resolver';\nimport path from 'path';\n\nimport { isFailedToResolveNameError, isFailedToResolvePathError } from './metroErrors';\nimport { env } from '../../../utils/env';\n\nconst debug = require('debug')('expo:metro:withMetroResolvers') as typeof console.log;\n\nexport type MetroResolver = NonNullable<MetroConfig['resolver']['resolveRequest']>;\n\n/** Expo Metro Resolvers can return `null` to skip without throwing an error. Metro Resolvers will throw either a `FailedToResolveNameError` or `FailedToResolvePathError`. */\nexport type ExpoCustomMetroResolver = (\n  ...args: Parameters<MetroResolver>\n) => ReturnType<MetroResolver> | null;\n\n/** @returns `MetroResolver` utilizing the upstream `resolve` method. */\nexport function getDefaultMetroResolver(projectRoot: string): MetroResolver {\n  return (context: ResolutionContext, moduleName: string, platform: string | null) => {\n    return metroResolver.resolve(context, moduleName, platform);\n  };\n}\n\nfunction optionsKeyForContext(context: ResolutionContext) {\n  const canonicalize = require('metro-core/src/canonicalize');\n\n  // Compound key for the resolver cache\n  return JSON.stringify(context.customResolverOptions ?? {}, canonicalize) ?? '';\n}\n\n/**\n * Extend the Metro config `resolver.resolveRequest` method with additional resolvers that can\n * exit early by returning a `Resolution` or skip to the next resolver by returning `null`.\n *\n * @param config Metro config.\n * @param resolvers custom MetroResolver to chain.\n * @returns a new `MetroConfig` with the `resolver.resolveRequest` method chained.\n */\nexport function withMetroResolvers(\n  config: MetroConfig,\n  resolvers: ExpoCustomMetroResolver[]\n): MetroConfig {\n  debug(\n    `Appending ${\n      resolvers.length\n    } custom resolvers to Metro config. (has custom resolver: ${!!config.resolver?.resolveRequest})`\n  );\n  // const hasUserDefinedResolver = !!config.resolver?.resolveRequest;\n  // const defaultResolveRequest = getDefaultMetroResolver(projectRoot);\n  const originalResolveRequest = config.resolver?.resolveRequest;\n\n  return {\n    ...config,\n    resolver: {\n      ...config.resolver,\n      resolveRequest(context, moduleName, platform) {\n        const upstreamResolveRequest = context.resolveRequest;\n\n        const universalContext = {\n          ...context,\n          resolveRequest(\n            ctx: CustomResolutionContext,\n            moduleName: string,\n            platform: string | null\n          ) {\n            for (const resolver of resolvers) {\n              try {\n                const res = resolver(ctx, moduleName, platform);\n                if (res) {\n                  return res;\n                }\n              } catch (error: any) {\n                // If the error is directly related to a resolver not being able to resolve a module, then\n                // we can ignore the error and try the next resolver. Otherwise, we should throw the error.\n                const isResolutionError =\n                  isFailedToResolveNameError(error) || isFailedToResolvePathError(error);\n                if (!isResolutionError) {\n                  throw error;\n                }\n                debug(\n                  `Custom resolver threw: ${error.constructor.name}. (module: ${moduleName}, platform: ${platform})`\n                );\n              }\n            }\n            // If we haven't returned by now, use the original resolver or upstream resolver.\n            return upstreamResolveRequest(ctx, moduleName, platform);\n          },\n        };\n\n        // If the user defined a resolver, run it first and depend on the documented\n        // chaining logic: https://facebook.github.io/metro/docs/resolution/#resolution-algorithm\n        //\n        // config.resolver.resolveRequest = (context, moduleName, platform) => {\n        //\n        //  // Do work...\n        //\n        //  return context.resolveRequest(context, moduleName, platform);\n        // };\n        const firstResolver = originalResolveRequest ?? universalContext.resolveRequest;\n        return firstResolver(universalContext, moduleName, platform);\n      },\n    },\n  };\n}\n\n/**\n * Hook into the Metro resolver chain and mutate the context so users can resolve against our custom assumptions.\n * For example, this will set `preferNativePlatform` to false when bundling for web.\n * */\nexport function withMetroMutatedResolverContext(\n  config: MetroConfig,\n  getContext: (\n    ctx: CustomResolutionContext,\n    moduleName: string,\n    platform: string | null\n  ) => CustomResolutionContext\n): MetroConfig {\n  const defaultResolveRequest = getDefaultMetroResolver(config.projectRoot);\n  const originalResolveRequest = config.resolver?.resolveRequest;\n\n  return {\n    ...config,\n    resolver: {\n      ...config.resolver,\n      resolveRequest(context, moduleName, platform) {\n        const universalContext = getContext(context, moduleName, platform);\n        const firstResolver =\n          originalResolveRequest ?? universalContext.resolveRequest ?? defaultResolveRequest;\n        return firstResolver(universalContext, moduleName, platform);\n      },\n    },\n  };\n}\n\nexport function withMetroErrorReportingResolver(config: MetroConfig): MetroConfig {\n  if (!env.EXPO_METRO_UNSTABLE_ERRORS) {\n    return config;\n  }\n\n  const originalResolveRequest = config.resolver?.resolveRequest;\n\n  function mutateResolutionError(\n    error: Error,\n    context: ResolutionContext,\n    moduleName: string,\n    platform: string | null\n  ) {\n    if (!platform) {\n      debug('Cannot mutate resolution error');\n      return error;\n    }\n\n    const mapByOrigin = depGraph.get(optionsKeyForContext(context));\n    const mapByPlatform = mapByOrigin?.get(platform);\n\n    if (!mapByPlatform) {\n      return error;\n    }\n\n    // collect all references inversely using some expensive lookup\n\n    const getReferences = (origin: string) => {\n      const inverseOrigin: { origin: string; previous: string; request: string }[] = [];\n\n      if (!mapByPlatform) {\n        return inverseOrigin;\n      }\n\n      for (const [originKey, mapByTarget] of mapByPlatform) {\n        // search comparing origin to path\n\n        const found = [...mapByTarget.values()].find((resolution) => resolution.path === origin);\n        if (found) {\n          inverseOrigin.push({\n            origin,\n            previous: originKey,\n            request: found.request,\n          });\n        }\n      }\n\n      return inverseOrigin;\n    };\n\n    const pad = (num: number) => {\n      return new Array(num).fill(' ').join('');\n    };\n\n    const root = config.server?.unstable_serverRoot ?? config.projectRoot;\n\n    type InverseDepResult = {\n      origin: string;\n      request: string;\n      previous: InverseDepResult[];\n    };\n    const recurseBackWithLimit = (\n      req: { origin: string; request: string },\n      limit: number,\n      count: number = 0\n    ) => {\n      const results: InverseDepResult = {\n        origin: req.origin,\n        request: req.request,\n        previous: [],\n      };\n\n      if (count >= limit) {\n        return results;\n      }\n\n      const inverse = getReferences(req.origin);\n      for (const match of inverse) {\n        // Use more qualified name if possible\n        // results.origin = match.origin;\n        // Found entry point\n        if (req.origin === match.previous) {\n          continue;\n        }\n        results.previous.push(\n          recurseBackWithLimit({ origin: match.previous, request: match.request }, limit, count + 1)\n        );\n      }\n      return results;\n    };\n\n    const inverseTree = recurseBackWithLimit(\n      { origin: context.originModulePath, request: moduleName },\n      // TODO: Do we need to expose this?\n      35\n    );\n\n    if (inverseTree.previous.length > 0) {\n      debug('Found inverse graph:', JSON.stringify(inverseTree, null, 2));\n      let extraMessage = chalk.bold('Import stack:');\n      const printRecursive = (tree: InverseDepResult, depth: number = 0) => {\n        let filename = path.relative(root, tree.origin);\n        if (filename.match(/\\?ctx=[\\w\\d]+$/)) {\n          filename = filename.replace(/\\?ctx=[\\w\\d]+$/, chalk.dim(' (require.context)'));\n        } else {\n          let formattedRequest = chalk.green(`\"${tree.request}\"`);\n\n          if (\n            // If bundling for web and the import is pulling internals from outside of react-native\n            // then mark it as an invalid import.\n            platform === 'web' &&\n            !/^(node_modules\\/)?react-native\\//.test(filename) &&\n            tree.request.match(/^react-native\\/.*/)\n          ) {\n            formattedRequest =\n              formattedRequest +\n              chalk`\\n          {yellow Importing react-native internals is not supported on web.}`;\n          }\n\n          filename = filename + chalk`\\n{gray  |} {cyan import} ${formattedRequest}\\n`;\n        }\n        let line = '\\n' + pad(depth) + chalk.gray(' ') + filename;\n        if (filename.match(/node_modules/)) {\n          line = chalk.gray(\n            // Bold the node module name\n            line.replace(/node_modules\\/([^/]+)/, (_match, p1) => {\n              return 'node_modules/' + chalk.bold(p1);\n            })\n          );\n        }\n        extraMessage += line;\n        for (const child of tree.previous) {\n          printRecursive(\n            child,\n            // Only add depth if there are multiple children\n            tree.previous.length > 1 ? depth + 1 : depth\n          );\n        }\n      };\n      printRecursive(inverseTree);\n\n      // @ts-expect-error\n      error._expoImportStack = extraMessage;\n    } else {\n      debug('Found no inverse tree for:', context.originModulePath);\n    }\n\n    return error;\n  }\n\n  const depGraph: Map<\n    // custom options\n    string,\n    Map<\n      // platform\n      string,\n      Map<\n        // origin module name\n        string,\n        Set<{\n          // required module name\n          path: string;\n          // This isn't entirely accurate since a module can be imported multiple times in a file,\n          // and use different names. But it's good enough for now.\n          request: string;\n        }>\n      >\n    >\n  > = new Map();\n\n  return {\n    ...config,\n    resolver: {\n      ...config.resolver,\n      resolveRequest(context, moduleName, platform) {\n        const storeResult = (res: NonNullable<ReturnType<ExpoCustomMetroResolver>>) => {\n          if (!platform) return;\n\n          const key = optionsKeyForContext(context);\n          if (!depGraph.has(key)) depGraph.set(key, new Map());\n          const mapByTarget = depGraph.get(key);\n          if (!mapByTarget!.has(platform)) mapByTarget!.set(platform, new Map());\n          const mapByPlatform = mapByTarget!.get(platform);\n          if (!mapByPlatform!.has(context.originModulePath))\n            mapByPlatform!.set(context.originModulePath, new Set());\n          const setForModule = mapByPlatform!.get(context.originModulePath)!;\n\n          const qualifiedModuleName = res?.type === 'sourceFile' ? res.filePath : moduleName;\n          setForModule.add({ path: qualifiedModuleName, request: moduleName });\n        };\n\n        // If the user defined a resolver, run it first and depend on the documented\n        // chaining logic: https://facebook.github.io/metro/docs/resolution/#resolution-algorithm\n        //\n        // config.resolver.resolveRequest = (context, moduleName, platform) => {\n        //\n        //  // Do work...\n        //\n        //  return context.resolveRequest(context, moduleName, platform);\n        // };\n        try {\n          const firstResolver = originalResolveRequest ?? context.resolveRequest;\n          const res = firstResolver(context, moduleName, platform);\n          storeResult(res);\n          return res;\n        } catch (error: any) {\n          throw mutateResolutionError(error, context, moduleName, platform);\n        }\n      },\n    },\n  };\n}\n"],"names":["getDefaultMetroResolver","withMetroResolvers","withMetroMutatedResolverContext","withMetroErrorReportingResolver","metroResolver","debug","require","projectRoot","context","moduleName","platform","resolve","optionsKeyForContext","canonicalize","JSON","stringify","customResolverOptions","config","resolvers","length","resolver","resolveRequest","originalResolveRequest","upstreamResolveRequest","universalContext","ctx","res","error","isResolutionError","isFailedToResolveNameError","isFailedToResolvePathError","constructor","name","firstResolver","getContext","defaultResolveRequest","env","EXPO_METRO_UNSTABLE_ERRORS","mutateResolutionError","mapByOrigin","depGraph","get","mapByPlatform","getReferences","origin","inverseOrigin","originKey","mapByTarget","found","values","find","resolution","path","push","previous","request","pad","num","Array","fill","join","root","server","unstable_serverRoot","recurseBackWithLimit","req","limit","count","results","inverse","match","inverseTree","originModulePath","extraMessage","chalk","bold","printRecursive","tree","depth","filename","relative","replace","dim","formattedRequest","green","test","line","gray","_match","p1","child","_expoImportStack","Map","storeResult","key","has","set","Set","setForModule","qualifiedModuleName","type","filePath","add"],"mappings":"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"}