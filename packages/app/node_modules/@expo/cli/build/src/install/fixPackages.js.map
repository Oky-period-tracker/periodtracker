{"version":3,"sources":["../../../src/install/fixPackages.ts"],"sourcesContent":["import * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\n\nimport { applyPluginsAsync } from './applyPlugins';\nimport { installExpoPackageAsync } from './installExpoPackage';\nimport * as Log from '../log';\nimport { getOperationLog } from '../start/doctor/dependencies/getVersionedPackages';\nimport { getVersionedDependenciesAsync } from '../start/doctor/dependencies/validateDependenciesVersions';\nimport { groupBy } from '../utils/array';\n\n/**\n * Given a list of incompatible packages, installs the correct versions of the packages with the package manager used for the project.\n */\nexport async function fixPackagesAsync(\n  projectRoot: string,\n  {\n    packages,\n    packageManager,\n    sdkVersion,\n    packageManagerArguments,\n  }: {\n    packages: Awaited<ReturnType<typeof getVersionedDependenciesAsync>>;\n    /** Package manager to use when installing the versioned packages. */\n    packageManager: PackageManager.NodePackageManager;\n    /**\n     * SDK to version `packages` for.\n     * @example '44.0.0'\n     */\n    sdkVersion: string;\n    /**\n     * Extra parameters to pass to the `packageManager` when installing versioned packages.\n     * @example ['--no-save']\n     */\n    packageManagerArguments: string[];\n  }\n): Promise<void> {\n  if (!packages.length) {\n    return;\n  }\n\n  const { dependencies = [], devDependencies = [] } = groupBy(packages, (dep) => dep.packageType);\n  const versioningMessages = getOperationLog({\n    othersCount: 0, // All fixable packages are versioned\n    nativeModulesCount: packages.length,\n    sdkVersion,\n  });\n\n  // display all packages to update, including expo package\n  Log.log(\n    chalk`\\u203A Installing ${\n      versioningMessages.length ? versioningMessages.join(' and ') + ' ' : ''\n    }using {bold ${packageManager.name}}`\n  );\n\n  // if updating expo package, install this first, then run expo install --fix again under new version\n  const expoDep = dependencies.find((dep) => dep.packageName === 'expo');\n  if (expoDep) {\n    await installExpoPackageAsync(projectRoot, {\n      packageManager,\n      packageManagerArguments,\n      expoPackageToInstall: `expo@${expoDep.expectedVersionOrRange}`,\n      followUpCommandArgs: ['--fix'],\n    });\n    // follow-up commands will be spawned in a detached process, so return immediately\n    return;\n  }\n\n  if (dependencies.length) {\n    const versionedPackages = dependencies.map(\n      (dep) => `${dep.packageName}@${dep.expectedVersionOrRange}`\n    );\n\n    await packageManager.addAsync([...packageManagerArguments, ...versionedPackages]);\n\n    await applyPluginsAsync(projectRoot, versionedPackages);\n  }\n\n  if (devDependencies.length) {\n    await packageManager.addDevAsync([\n      ...packageManagerArguments,\n      ...devDependencies.map((dep) => `${dep.packageName}@${dep.expectedVersionOrRange}`),\n    ]);\n  }\n}\n"],"names":["fixPackagesAsync","Log","projectRoot","packages","packageManager","sdkVersion","packageManagerArguments","length","dependencies","devDependencies","groupBy","dep","packageType","versioningMessages","getOperationLog","othersCount","nativeModulesCount","log","chalk","join","name","expoDep","find","packageName","installExpoPackageAsync","expoPackageToInstall","expectedVersionOrRange","followUpCommandArgs","versionedPackages","map","addAsync","applyPluginsAsync","addDevAsync"],"mappings":"AAAA;;;;QAasBA,gBAAgB,GAAhBA,gBAAgB;AAZpB,IAAA,MAAO,kCAAP,OAAO,EAAA;AAES,IAAA,aAAgB,WAAhB,gBAAgB,CAAA;AACV,IAAA,mBAAsB,WAAtB,sBAAsB,CAAA;AAClDC,IAAAA,GAAG,mCAAM,QAAQ,EAAd;AACiB,IAAA,qBAAmD,WAAnD,mDAAmD,CAAA;AAE3D,IAAA,MAAgB,WAAhB,gBAAgB,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKjC,eAAeD,gBAAgB,CACpCE,WAAmB,EACnB,EACEC,QAAQ,CAAA,EACRC,cAAc,CAAA,EACdC,UAAU,CAAA,EACVC,uBAAuB,CAAA,EAexB,EACc;IACf,IAAI,CAACH,QAAQ,CAACI,MAAM,EAAE;QACpB,OAAO;KACR;IAED,MAAM,EAAEC,YAAY,EAAG,EAAE,CAAA,EAAEC,eAAe,EAAG,EAAE,CAAA,EAAE,GAAGC,CAAAA,GAAAA,MAAO,AAAoC,CAAA,QAApC,CAACP,QAAQ,EAAE,CAACQ,GAAG,GAAKA,GAAG,CAACC,WAAW;IAAA,CAAC,AAAC;IAChG,MAAMC,kBAAkB,GAAGC,CAAAA,GAAAA,qBAAe,AAIxC,CAAA,gBAJwC,CAAC;QACzCC,WAAW,EAAE,CAAC;QACdC,kBAAkB,EAAEb,QAAQ,CAACI,MAAM;QACnCF,UAAU;KACX,CAAC,AAAC;IAEH,yDAAyD;IACzDJ,GAAG,CAACgB,GAAG,CACLC,MAAK,QAAA,CAAC,kBAAkB,EACtBL,kBAAkB,CAACN,MAAM,GAAGM,kBAAkB,CAACM,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,EAAE,CACxE,YAAY,EAAEf,cAAc,CAACgB,IAAI,CAAC,CAAC,CAAC,CACtC,CAAC;IAEF,oGAAoG;IACpG,MAAMC,OAAO,GAAGb,YAAY,CAACc,IAAI,CAAC,CAACX,GAAG,GAAKA,GAAG,CAACY,WAAW,KAAK,MAAM;IAAA,CAAC,AAAC;IACvE,IAAIF,OAAO,EAAE;QACX,MAAMG,CAAAA,GAAAA,mBAAuB,AAK3B,CAAA,wBAL2B,CAACtB,WAAW,EAAE;YACzCE,cAAc;YACdE,uBAAuB;YACvBmB,oBAAoB,EAAE,CAAC,KAAK,EAAEJ,OAAO,CAACK,sBAAsB,CAAC,CAAC;YAC9DC,mBAAmB,EAAE;gBAAC,OAAO;aAAC;SAC/B,CAAC,CAAC;QACH,kFAAkF;QAClF,OAAO;KACR;IAED,IAAInB,YAAY,CAACD,MAAM,EAAE;QACvB,MAAMqB,iBAAiB,GAAGpB,YAAY,CAACqB,GAAG,CACxC,CAAClB,GAAG,GAAK,CAAC,EAAEA,GAAG,CAACY,WAAW,CAAC,CAAC,EAAEZ,GAAG,CAACe,sBAAsB,CAAC,CAAC;QAAA,CAC5D,AAAC;QAEF,MAAMtB,cAAc,CAAC0B,QAAQ,CAAC;eAAIxB,uBAAuB;eAAKsB,iBAAiB;SAAC,CAAC,CAAC;QAElF,MAAMG,CAAAA,GAAAA,aAAiB,AAAgC,CAAA,kBAAhC,CAAC7B,WAAW,EAAE0B,iBAAiB,CAAC,CAAC;KACzD;IAED,IAAInB,eAAe,CAACF,MAAM,EAAE;QAC1B,MAAMH,cAAc,CAAC4B,WAAW,CAAC;eAC5B1B,uBAAuB;eACvBG,eAAe,CAACoB,GAAG,CAAC,CAAClB,GAAG,GAAK,CAAC,EAAEA,GAAG,CAACY,WAAW,CAAC,CAAC,EAAEZ,GAAG,CAACe,sBAAsB,CAAC,CAAC;YAAA,CAAC;SACpF,CAAC,CAAC;KACJ;CACF"}