{"version":3,"names":["_codegenNativeComponent","_interopRequireDefault","require","_codegenNativeCommands","obj","__esModule","default","Commands","codegenNativeCommands","supportedCommands","exports","_default","codegenNativeComponent"],"sources":["SearchBarNativeComponent.ts"],"sourcesContent":["/* eslint-disable */\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\nimport type { ViewProps, ColorValue, HostComponent } from 'react-native';\nimport type {\n  WithDefault,\n  BubblingEventHandler,\n} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\n\ntype SearchBarEvent = Readonly<{}>;\n\ntype SearchButtonPressedEvent = Readonly<{\n  text?: string;\n}>;\n\ntype ChangeTextEvent = Readonly<{\n  text?: string;\n}>;\n\ntype SearchBarPlacement = 'automatic' | 'inline' | 'stacked';\n\ntype AutoCapitalizeType = 'none' | 'words' | 'sentences' | 'characters';\n\ninterface NativeProps extends ViewProps {\n  onFocus?: BubblingEventHandler<SearchBarEvent> | null;\n  onBlur?: BubblingEventHandler<SearchBarEvent> | null;\n  onSearchButtonPress?: BubblingEventHandler<SearchButtonPressedEvent> | null;\n  onCancelButtonPress?: BubblingEventHandler<SearchBarEvent> | null;\n  onChangeText?: BubblingEventHandler<ChangeTextEvent> | null;\n  hideWhenScrolling?: boolean;\n  autoCapitalize?: WithDefault<AutoCapitalizeType, 'none'>;\n  placeholder?: string;\n  placement?: WithDefault<SearchBarPlacement, 'stacked'>;\n  obscureBackground?: boolean;\n  hideNavigationBar?: boolean;\n  cancelButtonText?: string;\n  // TODO: implement these on iOS\n  barTintColor?: ColorValue;\n  tintColor?: ColorValue;\n  textColor?: ColorValue;\n\n  // Android only\n  disableBackButtonOverride?: boolean;\n  // TODO: consider creating enum here\n  inputType?: string;\n  onClose?: BubblingEventHandler<SearchBarEvent> | null;\n  onOpen?: BubblingEventHandler<SearchBarEvent> | null;\n  hintTextColor?: ColorValue;\n  headerIconColor?: ColorValue;\n  shouldShowHintSearchIcon?: WithDefault<boolean, true>;\n}\n\ntype ComponentType = HostComponent<NativeProps>;\n\ninterface NativeCommands {\n  blur: (viewRef: React.ElementRef<ComponentType>) => void;\n  focus: (viewRef: React.ElementRef<ComponentType>) => void;\n  clearText: (viewRef: React.ElementRef<ComponentType>) => void;\n  toggleCancelButton: (\n    viewRef: React.ElementRef<ComponentType>,\n    flag: boolean\n  ) => void;\n  setText: (viewRef: React.ElementRef<ComponentType>, text: string) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: [\n    'blur',\n    'focus',\n    'clearText',\n    'toggleCancelButton',\n    'setText',\n  ],\n});\n\nexport default codegenNativeComponent<NativeProps>('RNSSearchBar', {});\n"],"mappings":";;;;;;AACA,IAAAA,uBAAA,GAAAC,sBAAA,CAAAC,OAAA;AAMA,IAAAC,sBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAA2F,SAAAD,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAP3F;;AAiEO,MAAMG,QAAwB,GAAG,IAAAC,8BAAqB,EAAiB;EAC5EC,iBAAiB,EAAE,CACjB,MAAM,EACN,OAAO,EACP,WAAW,EACX,oBAAoB,EACpB,SAAS;AAEb,CAAC,CAAC;AAACC,OAAA,CAAAH,QAAA,GAAAA,QAAA;AAAA,IAAAI,QAAA,GAEY,IAAAC,+BAAsB,EAAc,cAAc,EAAE,CAAC,CAAC,CAAC;AAAAF,OAAA,CAAAJ,OAAA,GAAAK,QAAA"}