import fs from 'fs'
import { StaticContent } from '@oky/core'
import { content as staleContent } from './packages/core/src/modules/translations/content'

const removeDeadContent = (content: StaticContent) => {
  // ===== Articles ===== //
  const articlesToDelete = Object.values(content.articles.byId)
    .filter((item) => item.live === false)
    .map((item) => item.id)

  const articles = {
    allIds: content.articles.allIds.filter((item) => !articlesToDelete.includes(item)),
    byId: { ...content.articles.byId },
  }

  articlesToDelete.forEach((id) => {
    delete articles.byId[id]
  })

  // ===== Subcategories ===== //
  const subCategories = {
    allIds: content.subCategories.allIds,
    byId: { ...content.subCategories.byId },
  }

  // Remove deleted articles from subcategories
  Object.values(subCategories.byId).forEach((item) => {
    const arts = item.articles.filter((artId) => !articlesToDelete.includes(artId))
    subCategories.byId[item.id] = {
      ...item,
      articles: arts,
    }
  })

  const subCategoriesToDelete = Object.values(content.subCategories.byId)
    .filter((item) => {
      const hasLiveArticles = item.articles.some((articleId) => {
        return content.articles.byId[articleId]?.live !== false
      })
      return !hasLiveArticles
    })
    .map((item) => item.id)

  subCategories.allIds = subCategories.allIds.filter(
    (item) => !subCategoriesToDelete.includes(item),
  )
  subCategoriesToDelete.forEach((id) => {
    delete subCategories.byId[id]
  })

  // ===== Categories ===== //
  const categories = {
    allIds: content.categories.allIds,
    byId: { ...content.categories.byId },
  }

  // Remove deleted articles from subcategories
  Object.values(categories.byId).forEach((item) => {
    const subcats = item.subCategories.filter(
      (subcatId) => !subCategoriesToDelete.includes(subcatId),
    )
    categories.byId[item.id] = {
      ...item,
      subCategories: subcats,
    }
  })

  const categoriesToDelete = Object.values(categories.byId)
    .filter((item) => {
      return item.subCategories.length > 0
    })
    .map((item) => item.id)

  categories.allIds = categories.allIds.filter((item) => !categoriesToDelete.includes(item))
  categoriesToDelete.forEach((id) => {
    delete categories.byId[id]
  })

  // ===== Did you knows ===== //
  const didYouKnowsToDelete = Object.values(content.didYouKnows.byId)
    .filter((item) => item.live === false)
    .map((item) => item.id)

  const didYouKnows = {
    allIds: content.didYouKnows.allIds.filter((item) => !didYouKnowsToDelete.includes(item)),
    byId: { ...content.didYouKnows.byId },
  }

  didYouKnowsToDelete.forEach((id) => {
    delete didYouKnows.byId[id]
  })

  // ===== Avatars ===== //
  const avatarMessages = content.avatarMessages.filter((item) => item.live !== false)

  return {
    ...content,
    articles,
    avatarMessages,
    didYouKnows,
  }
}

const locales = Object.keys(staleContent)

locales.forEach((locale) => {
  const output = removeDeadContent(staleContent[locale])

  const outputFilepath = `./packages/core/src/modules/translations/contentLive/${locale}.ts`

  const outputString = `
  // THIS FILE IS AUTOGENERATED - DO NOT EDIT THIS MANUALLY
  import { StaticContent } from '../../../types'

  export const ${locale}: StaticContent = ${JSON.stringify(output)}`

  fs.writeFileSync(outputFilepath, outputString)
})

const indexFilepath = `./packages/core/src/modules/translations/contentLive/index.ts`

const indexOutput = locales
  .map((locale) => {
    return `import { ${locale} } from './${locale}'`
  })
  .join('\n')

const indexString = `

// THIS FILE IS AUTOGENERATED - DO NOT EDIT THIS MANUALLY
import { Locale } from '../'
import { StaticContent } from '../../../types'

${indexOutput} \n\nexport const liveContent: Record<Locale, StaticContent> = {
    ${locales.join(',\n  ')}
}`

fs.writeFileSync(indexFilepath, indexString)
