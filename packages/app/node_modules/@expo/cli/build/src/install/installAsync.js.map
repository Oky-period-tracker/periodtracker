{"version":3,"sources":["../../../src/install/installAsync.ts"],"sourcesContent":["import { getConfig, getPackageJson } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\n\nimport { applyPluginsAsync } from './applyPlugins';\nimport { checkPackagesAsync } from './checkPackages';\nimport { installExpoPackageAsync } from './installExpoPackage';\nimport { Options } from './resolveOptions';\nimport * as Log from '../log';\nimport { getVersionedPackagesAsync } from '../start/doctor/dependencies/getVersionedPackages';\nimport { CommandError } from '../utils/errors';\nimport { findUpProjectRootOrAssert } from '../utils/findUp';\nimport { learnMore } from '../utils/link';\nimport { setNodeEnv } from '../utils/nodeEnv';\nimport { joinWithCommasAnd } from '../utils/strings';\n\n/**\n * Installs versions of specified packages compatible with the current Expo SDK version, or\n * checks/ fixes dependencies in project if they don't match compatible versions specified in bundledNativeModules or versions endpoints.\n *\n * @param packages list of packages to install, if installing specific packages and not checking/ fixing\n * @param options options, including check or fix\n * @param packageManagerArguments arguments to forward to the package manager invoked while installing\n * @returns Promise<void>\n */\nexport async function installAsync(\n  packages: string[],\n  options: Options & { projectRoot?: string },\n  packageManagerArguments: string[] = []\n) {\n  setNodeEnv('development');\n  // Locate the project root based on the process current working directory.\n  // This enables users to run `npx expo install` from a subdirectory of the project.\n  const projectRoot = options.projectRoot ?? findUpProjectRootOrAssert(process.cwd());\n  require('@expo/env').load(projectRoot);\n\n  // Resolve the package manager used by the project, or based on the provided arguments.\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    npm: options.npm,\n    yarn: options.yarn,\n    bun: options.bun,\n    pnpm: options.pnpm,\n    silent: options.silent,\n    log: Log.log,\n  });\n\n  const expoVersion = findPackageByName(packages, 'expo');\n  const otherPackages = packages.filter((pkg) => pkg !== expoVersion);\n\n  // Abort early when installing `expo@<version>` and other packages with `--fix/--check`\n  if (packageHasVersion(expoVersion) && otherPackages.length && (options.check || options.fix)) {\n    throw new CommandError(\n      'BAD_ARGS',\n      `Cannot install other packages with ${expoVersion} and --fix or --check`\n    );\n  }\n\n  // Only check/fix packages if `expo@<version>` is not requested\n  if (!packageHasVersion(expoVersion) && (options.check || options.fix)) {\n    return await checkPackagesAsync(projectRoot, {\n      packages,\n      options,\n      packageManager,\n      packageManagerArguments,\n    });\n  }\n\n  // Read the project Expo config without plugins.\n  const { exp } = getConfig(projectRoot, {\n    // Sometimes users will add a plugin to the config before installing the library,\n    // this wouldn't work unless we dangerously disable plugin serialization.\n    skipPlugins: true,\n  });\n\n  // Resolve the versioned packages, then install them.\n  return installPackagesAsync(projectRoot, {\n    ...options,\n    packageManager,\n    packages,\n    packageManagerArguments,\n    sdkVersion: exp.sdkVersion!,\n  });\n}\n\n/** Version packages and install in a project. */\nexport async function installPackagesAsync(\n  projectRoot: string,\n  {\n    packages,\n    packageManager,\n    sdkVersion,\n    packageManagerArguments,\n    fix,\n    check,\n  }: Options & {\n    /**\n     * List of packages to version, grouped by the type of dependency.\n     * @example ['uuid', 'react-native-reanimated@latest']\n     */\n    packages: string[];\n    /** Package manager to use when installing the versioned packages. */\n    packageManager: PackageManager.NodePackageManager;\n    /**\n     * SDK to version `packages` for.\n     * @example '44.0.0'\n     */\n    sdkVersion: string;\n    /**\n     * Extra parameters to pass to the `packageManager` when installing versioned packages.\n     * @example ['--no-save']\n     */\n    packageManagerArguments: string[];\n  }\n): Promise<void> {\n  // Read the project Expo config without plugins.\n  const pkg = getPackageJson(projectRoot);\n\n  //assertNotInstallingExcludedPackages(projectRoot, packages, pkg);\n\n  const versioning = await getVersionedPackagesAsync(projectRoot, {\n    packages,\n    // sdkVersion is always defined because we don't skipSDKVersionRequirement in getConfig.\n    sdkVersion,\n    pkg,\n  });\n\n  Log.log(\n    chalk`\\u203A Installing ${\n      versioning.messages.length ? versioning.messages.join(' and ') + ' ' : ''\n    }using {bold ${packageManager.name}}`\n  );\n\n  if (versioning.excludedNativeModules.length) {\n    const alreadyExcluded = versioning.excludedNativeModules.filter(\n      (module) => module.isExcludedFromValidation\n    );\n    const specifiedExactVersion = versioning.excludedNativeModules.filter(\n      (module) => !module.isExcludedFromValidation\n    );\n\n    if (alreadyExcluded.length) {\n      Log.log(\n        chalk`\\u203A Using ${joinWithCommasAnd(\n          alreadyExcluded.map(\n            ({ bundledNativeVersion, name, specifiedVersion }) =>\n              `${specifiedVersion || 'latest'} instead of  ${bundledNativeVersion} for ${name}`\n          )\n        )} because ${\n          alreadyExcluded.length > 1 ? 'they are' : 'it is'\n        } listed in {bold expo.install.exclude} in package.json. ${learnMore(\n          'https://expo.dev/more/expo-cli/#configuring-dependency-validation'\n        )}`\n      );\n    }\n\n    if (specifiedExactVersion.length) {\n      Log.log(\n        chalk`\\u203A Using ${joinWithCommasAnd(\n          specifiedExactVersion.map(\n            ({ bundledNativeVersion, name, specifiedVersion }) =>\n              `${specifiedVersion} instead of ${bundledNativeVersion} for ${name}`\n          )\n        )} because ${\n          specifiedExactVersion.length > 1 ? 'these versions' : 'this version'\n        } was explicitly provided. Packages excluded from dependency validation should be listed in {bold expo.install.exclude} in package.json. ${learnMore(\n          'https://expo.dev/more/expo-cli/#configuring-dependency-validation'\n        )}`\n      );\n    }\n  }\n\n  // `expo` needs to be installed before installing other packages\n  const expoPackage = findPackageByName(packages, 'expo');\n  if (expoPackage) {\n    const postInstallCommand = packages.filter((pkg) => pkg !== expoPackage);\n\n    // Pipe options to the next command\n    if (fix) postInstallCommand.push('--fix');\n    if (check) postInstallCommand.push('--check');\n\n    // Abort after installing `expo`, follow up command is spawn in a new process\n    return await installExpoPackageAsync(projectRoot, {\n      packageManager,\n      packageManagerArguments,\n      expoPackageToInstall: versioning.packages.find((pkg) => pkg.startsWith('expo@'))!,\n      followUpCommandArgs: postInstallCommand,\n    });\n  }\n\n  await packageManager.addAsync([...packageManagerArguments, ...versioning.packages]);\n\n  await applyPluginsAsync(projectRoot, versioning.packages);\n}\n\n/** Find a package, by name, in the requested packages list (`expo` -> `expo`/`expo@<version>`) */\nfunction findPackageByName(packages: string[], name: string) {\n  return packages.find((pkg) => pkg === name || pkg.startsWith(`${name}@`));\n}\n\n/** Determine if a specific version is requested for a package */\nfunction packageHasVersion(name = '') {\n  return name.includes('@');\n}\n"],"names":["installAsync","installPackagesAsync","PackageManager","Log","packages","options","packageManagerArguments","setNodeEnv","projectRoot","findUpProjectRootOrAssert","process","cwd","require","load","packageManager","createForProject","npm","yarn","bun","pnpm","silent","log","expoVersion","findPackageByName","otherPackages","filter","pkg","packageHasVersion","length","check","fix","CommandError","checkPackagesAsync","exp","getConfig","skipPlugins","sdkVersion","getPackageJson","versioning","getVersionedPackagesAsync","chalk","messages","join","name","excludedNativeModules","alreadyExcluded","module","isExcludedFromValidation","specifiedExactVersion","joinWithCommasAnd","map","bundledNativeVersion","specifiedVersion","learnMore","expoPackage","postInstallCommand","push","installExpoPackageAsync","expoPackageToInstall","find","startsWith","followUpCommandArgs","addAsync","applyPluginsAsync","includes"],"mappings":"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"}