{"version":3,"sources":["../../../../../src/start/server/metro/withMetroMultiPlatform.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { ExpoConfig, Platform } from '@expo/config';\nimport fs from 'fs';\nimport { ConfigT } from 'metro-config';\nimport { Resolution, ResolutionContext, CustomResolutionContext } from 'metro-resolver';\nimport * as metroResolver from 'metro-resolver';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { createFastResolver } from './createExpoMetroResolver';\nimport {\n  EXTERNAL_REQUIRE_NATIVE_POLYFILL,\n  EXTERNAL_REQUIRE_POLYFILL,\n  METRO_SHIMS_FOLDER,\n  getNodeExternalModuleId,\n  isNodeExternal,\n  setupNodeExternals,\n  setupShimFiles,\n} from './externals';\nimport { isFailedToResolveNameError, isFailedToResolvePathError } from './metroErrors';\nimport {\n  withMetroErrorReportingResolver,\n  withMetroMutatedResolverContext,\n  withMetroResolvers,\n} from './withMetroResolvers';\nimport { Log } from '../../../log';\nimport { FileNotifier } from '../../../utils/FileNotifier';\nimport { env } from '../../../utils/env';\nimport { installExitHooks } from '../../../utils/exit';\nimport { isInteractive } from '../../../utils/interactive';\nimport { loadTsConfigPathsAsync, TsConfigPaths } from '../../../utils/tsconfig/loadTsConfigPaths';\nimport { resolveWithTsConfigPaths } from '../../../utils/tsconfig/resolveWithTsConfigPaths';\nimport { PlatformBundlers } from '../platformBundlers';\n\ntype Mutable<T> = { -readonly [K in keyof T]: T[K] };\n\nconst debug = require('debug')('expo:start:server:metro:multi-platform') as typeof console.log;\n\nfunction withWebPolyfills(config: ConfigT): ConfigT {\n  const originalGetPolyfills = config.serializer.getPolyfills\n    ? config.serializer.getPolyfills.bind(config.serializer)\n    : () => [];\n\n  const getPolyfills = (ctx: { platform: string | null }): readonly string[] => {\n    if (ctx.platform === 'web') {\n      return [\n        // NOTE: We might need this for all platforms\n        path.join(config.projectRoot, EXTERNAL_REQUIRE_POLYFILL),\n        // TODO: runtime polyfills, i.e. Fast Refresh, error overlay, React Dev Tools...\n      ];\n    }\n    // Generally uses `rn-get-polyfills`\n    const polyfills = originalGetPolyfills(ctx);\n\n    return [...polyfills, path.join(config.projectRoot, EXTERNAL_REQUIRE_NATIVE_POLYFILL)];\n  };\n\n  return {\n    ...config,\n    serializer: {\n      ...config.serializer,\n      getPolyfills,\n    },\n  };\n}\n\nfunction normalizeSlashes(p: string) {\n  return p.replace(/\\\\/g, '/');\n}\n\nexport function getNodejsExtensions(srcExts: readonly string[]): string[] {\n  const mjsExts = srcExts.filter((ext) => /mjs$/.test(ext));\n  const nodejsSourceExtensions = srcExts.filter((ext) => !/mjs$/.test(ext));\n  // find index of last `*.js` extension\n  const jsIndex = nodejsSourceExtensions.reduce((index, ext, i) => {\n    return /jsx?$/.test(ext) ? i : index;\n  }, -1);\n\n  // insert `*.mjs` extensions after `*.js` extensions\n  nodejsSourceExtensions.splice(jsIndex + 1, 0, ...mjsExts);\n\n  return nodejsSourceExtensions;\n}\n\n/**\n * Apply custom resolvers to do the following:\n * - Disable `.native.js` extensions on web.\n * - Alias `react-native` to `react-native-web` on web.\n * - Redirect `react-native-web/dist/modules/AssetRegistry/index.js` to `@react-native/assets/registry.js` on web.\n * - Add support for `tsconfig.json`/`jsconfig.json` aliases via `compilerOptions.paths`.\n */\nexport function withExtendedResolver(\n  config: ConfigT,\n  {\n    tsconfig,\n    isTsconfigPathsEnabled,\n    isFastResolverEnabled,\n    isExporting,\n  }: {\n    tsconfig: TsConfigPaths | null;\n    isTsconfigPathsEnabled?: boolean;\n    isFastResolverEnabled?: boolean;\n    isExporting?: boolean;\n  }\n) {\n  if (isFastResolverEnabled) {\n    Log.warn(`Experimental bundling features are enabled.`);\n  }\n\n  // Get the `transformer.assetRegistryPath`\n  // this needs to be unified since you can't dynamically\n  // swap out the transformer based on platform.\n  const assetRegistryPath = fs.realpathSync(\n    path.resolve(resolveFrom(config.projectRoot, '@react-native/assets-registry/registry.js'))\n  );\n\n  const defaultResolver = metroResolver.resolve;\n  const resolver = isFastResolverEnabled\n    ? createFastResolver({\n        preserveSymlinks: config.resolver?.unstable_enableSymlinks ?? true,\n        blockList: Array.isArray(config.resolver?.blockList)\n          ? config.resolver?.blockList\n          : [config.resolver?.blockList],\n      })\n    : defaultResolver;\n\n  const aliases: { [key: string]: Record<string, string> } = {\n    web: {\n      'react-native': 'react-native-web',\n      'react-native/index': 'react-native-web',\n    },\n  };\n\n  const universalAliases: [RegExp, string][] = [];\n\n  // This package is currently always installed as it is included in the `expo` package.\n  if (resolveFrom.silent(config.projectRoot, '@expo/vector-icons')) {\n    debug('Enabling alias: react-native-vector-icons -> @expo/vector-icons');\n    universalAliases.push([/^react-native-vector-icons(\\/.*)?/, '@expo/vector-icons$1']);\n  }\n\n  const preferredMainFields: { [key: string]: string[] } = {\n    // Defaults from Expo Webpack. Most packages using `react-native` don't support web\n    // in the `react-native` field, so we should prefer the `browser` field.\n    // https://github.com/expo/router/issues/37\n    web: ['browser', 'module', 'main'],\n  };\n\n  let tsConfigResolve =\n    isTsconfigPathsEnabled && (tsconfig?.paths || tsconfig?.baseUrl != null)\n      ? resolveWithTsConfigPaths.bind(resolveWithTsConfigPaths, {\n          paths: tsconfig.paths ?? {},\n          baseUrl: tsconfig.baseUrl ?? config.projectRoot,\n          hasBaseUrl: !!tsconfig.baseUrl,\n        })\n      : null;\n\n  // TODO: Move this to be a transform key for invalidation.\n  if (!isExporting && isInteractive()) {\n    if (isTsconfigPathsEnabled) {\n      // TODO: We should track all the files that used imports and invalidate them\n      // currently the user will need to save all the files that use imports to\n      // use the new aliases.\n      const configWatcher = new FileNotifier(config.projectRoot, [\n        './tsconfig.json',\n        './jsconfig.json',\n      ]);\n      configWatcher.startObserving(() => {\n        debug('Reloading tsconfig.json');\n        loadTsConfigPathsAsync(config.projectRoot).then((tsConfigPaths) => {\n          if (tsConfigPaths?.paths && !!Object.keys(tsConfigPaths.paths).length) {\n            debug('Enabling tsconfig.json paths support');\n            tsConfigResolve = resolveWithTsConfigPaths.bind(resolveWithTsConfigPaths, {\n              paths: tsConfigPaths.paths ?? {},\n              baseUrl: tsConfigPaths.baseUrl ?? config.projectRoot,\n              hasBaseUrl: !!tsConfigPaths.baseUrl,\n            });\n          } else {\n            debug('Disabling tsconfig.json paths support');\n            tsConfigResolve = null;\n          }\n        });\n      });\n\n      // TODO: This probably prevents the process from exiting.\n      installExitHooks(() => {\n        configWatcher.stopObserving();\n      });\n    } else {\n      debug('Skipping tsconfig.json paths support');\n    }\n  }\n\n  let nodejsSourceExtensions: string[] | null = null;\n\n  const shimsFolder = path.join(config.projectRoot, METRO_SHIMS_FOLDER);\n\n  function getStrictResolver(\n    { resolveRequest, ...context }: ResolutionContext,\n    platform: string | null\n  ) {\n    return function doResolve(moduleName: string): Resolution {\n      return resolver(context, moduleName, platform);\n    };\n  }\n\n  function getOptionalResolver(context: ResolutionContext, platform: string | null) {\n    const doResolve = getStrictResolver(context, platform);\n    return function optionalResolve(moduleName: string): Resolution | null {\n      try {\n        return doResolve(moduleName);\n      } catch (error) {\n        // If the error is directly related to a resolver not being able to resolve a module, then\n        // we can ignore the error and try the next resolver. Otherwise, we should throw the error.\n        const isResolutionError =\n          isFailedToResolveNameError(error) || isFailedToResolvePathError(error);\n        if (!isResolutionError) {\n          throw error;\n        }\n      }\n      return null;\n    };\n  }\n\n  const metroConfigWithCustomResolver = withMetroResolvers(config, [\n    // tsconfig paths\n    (context: ResolutionContext, moduleName: string, platform: string | null) => {\n      return (\n        tsConfigResolve?.(\n          {\n            originModulePath: context.originModulePath,\n            moduleName,\n          },\n          getOptionalResolver(context, platform)\n        ) ?? null\n      );\n    },\n\n    // Node.js externals support\n    (context: ResolutionContext, moduleName: string, platform: string | null) => {\n      // This is a web-only feature, we may extend the shimming to native platforms in the future.\n      if (platform !== 'web') {\n        return null;\n      }\n\n      const moduleId = isNodeExternal(moduleName);\n      if (!moduleId) {\n        return null;\n      }\n\n      if (\n        // In browser runtimes, we want to either resolve a local node module by the same name, or shim the module to\n        // prevent crashing when Node.js built-ins are imported.\n        context.customResolverOptions?.environment !== 'node'\n      ) {\n        // Perform optional resolve first. If the module doesn't exist (no module in the node_modules)\n        // then we can mock the file to use an empty module.\n        const result = getOptionalResolver(context, platform)(moduleName);\n        return (\n          result ?? {\n            // In this case, mock the file to use an empty module.\n            type: 'empty',\n          }\n        );\n      }\n\n      const redirectedModuleName = getNodeExternalModuleId(context.originModulePath, moduleId);\n      debug(`Redirecting Node.js external \"${moduleId}\" to \"${redirectedModuleName}\"`);\n      return getStrictResolver(context, platform)(redirectedModuleName);\n    },\n\n    // Basic moduleId aliases\n    (context: ResolutionContext, moduleName: string, platform: string | null) => {\n      // Conditionally remap `react-native` to `react-native-web` on web in\n      // a way that doesn't require Babel to resolve the alias.\n      if (platform && platform in aliases && aliases[platform][moduleName]) {\n        const redirectedModuleName = aliases[platform][moduleName];\n        return getStrictResolver(context, platform)(redirectedModuleName);\n      }\n\n      for (const [matcher, alias] of universalAliases) {\n        const match = moduleName.match(matcher);\n        if (match) {\n          const aliasedModule = alias.replace(\n            /\\$(\\d+)/g,\n            (_, index) => match[parseInt(index, 10)] ?? ''\n          );\n          const doResolve = getStrictResolver(context, platform);\n          debug(`Alias \"${moduleName}\" to \"${aliasedModule}\"`);\n          return doResolve(aliasedModule);\n        }\n      }\n\n      return null;\n    },\n\n    // HACK(EvanBacon):\n    // React Native uses `event-target-shim` incorrectly and this causes the native runtime\n    // to fail to load. This is a temporary workaround until we can fix this upstream.\n    // https://github.com/facebook/react-native/pull/38628\n    (context: ResolutionContext, moduleName: string, platform: string | null) => {\n      if (platform !== 'web' && moduleName === 'event-target-shim') {\n        debug('For event-target-shim to use js:', context.originModulePath);\n        const doResolve = getStrictResolver(context, platform);\n        return doResolve('event-target-shim/dist/event-target-shim.js');\n      }\n\n      return null;\n    },\n\n    // TODO: Reduce these as much as possible in the future.\n    // Complex post-resolution rewrites.\n    (context: ResolutionContext, moduleName: string, platform: string | null) => {\n      const doResolve = getStrictResolver(context, platform);\n\n      const result = doResolve(moduleName);\n\n      if (result.type !== 'sourceFile') {\n        return result;\n      }\n\n      // Replace the web resolver with the original one.\n      // This is basically an alias for web-only.\n      // TODO: Drop this in favor of the standalone asset registry module.\n      if (shouldAliasAssetRegistryForWeb(platform, result)) {\n        // @ts-expect-error: `readonly` for some reason.\n        result.filePath = assetRegistryPath;\n      }\n\n      if (platform === 'web' && result.filePath.includes('node_modules')) {\n        // Replace with static shims\n\n        const normalName = normalizeSlashes(result.filePath)\n          // Drop everything up until the `node_modules` folder.\n          .replace(/.*node_modules\\//, '');\n\n        const shimPath = path.join(shimsFolder, normalName);\n        if (fs.existsSync(shimPath)) {\n          // @ts-expect-error: `readonly` for some reason.\n          result.filePath = shimPath;\n        }\n      }\n\n      return result;\n    },\n  ]);\n\n  // Ensure we mutate the resolution context to include the custom resolver options for server and web.\n  const metroConfigWithCustomContext = withMetroMutatedResolverContext(\n    metroConfigWithCustomResolver,\n    (\n      immutableContext: CustomResolutionContext,\n      moduleName: string,\n      platform: string | null\n    ): CustomResolutionContext => {\n      const context: Mutable<CustomResolutionContext> = {\n        ...immutableContext,\n        preferNativePlatform: platform !== 'web',\n      };\n\n      if (context.customResolverOptions?.environment === 'node') {\n        // Adjust nodejs source extensions to sort mjs after js, including platform variants.\n        if (nodejsSourceExtensions === null) {\n          nodejsSourceExtensions = getNodejsExtensions(context.sourceExts);\n        }\n        context.sourceExts = nodejsSourceExtensions;\n\n        context.unstable_enablePackageExports = true;\n        context.unstable_conditionNames = ['node', 'require'];\n        context.unstable_conditionsByPlatform = {};\n        // Node.js runtimes should only be importing main at the moment.\n        // This is a temporary fix until we can support the package.json exports.\n        context.mainFields = ['main', 'module'];\n      } else {\n        // Non-server changes\n\n        if (!env.EXPO_METRO_NO_MAIN_FIELD_OVERRIDE && platform && platform in preferredMainFields) {\n          context.mainFields = preferredMainFields[platform];\n        }\n      }\n\n      return context;\n    }\n  );\n\n  return withMetroErrorReportingResolver(metroConfigWithCustomContext);\n}\n\n/** @returns `true` if the incoming resolution should be swapped on web. */\nexport function shouldAliasAssetRegistryForWeb(\n  platform: string | null,\n  result: Resolution\n): boolean {\n  return (\n    platform === 'web' &&\n    result?.type === 'sourceFile' &&\n    typeof result?.filePath === 'string' &&\n    normalizeSlashes(result.filePath).endsWith(\n      'react-native-web/dist/modules/AssetRegistry/index.js'\n    )\n  );\n}\n/** @returns `true` if the incoming resolution should be swapped. */\nexport function shouldAliasModule(\n  input: {\n    platform: string | null;\n    result: Resolution;\n  },\n  alias: { platform: string; output: string }\n): boolean {\n  return (\n    input.platform === alias.platform &&\n    input.result?.type === 'sourceFile' &&\n    typeof input.result?.filePath === 'string' &&\n    normalizeSlashes(input.result.filePath).endsWith(alias.output)\n  );\n}\n\n/** Add support for `react-native-web` and the Web platform. */\nexport async function withMetroMultiPlatformAsync(\n  projectRoot: string,\n  {\n    config,\n    exp,\n    platformBundlers,\n    isTsconfigPathsEnabled,\n    webOutput,\n    isFastResolverEnabled,\n    isExporting,\n  }: {\n    config: ConfigT;\n    exp: ExpoConfig;\n    isTsconfigPathsEnabled: boolean;\n    platformBundlers: PlatformBundlers;\n    webOutput?: 'single' | 'static' | 'server';\n    isFastResolverEnabled?: boolean;\n    isExporting?: boolean;\n  }\n) {\n  if (!config.projectRoot) {\n    // @ts-expect-error: read-only types\n    config.projectRoot = projectRoot;\n  }\n\n  // Required for @expo/metro-runtime to format paths in the web LogBox.\n  process.env.EXPO_PUBLIC_PROJECT_ROOT = process.env.EXPO_PUBLIC_PROJECT_ROOT ?? projectRoot;\n\n  if (['static', 'server'].includes(webOutput ?? '')) {\n    // Enable static rendering in runtime space.\n    process.env.EXPO_PUBLIC_USE_STATIC = '1';\n  }\n\n  // This is used for running Expo CLI in development against projects outside the monorepo.\n  if (!isDirectoryIn(__dirname, projectRoot)) {\n    if (!config.watchFolders) {\n      // @ts-expect-error: watchFolders is readonly\n      config.watchFolders = [];\n    }\n    // @ts-expect-error: watchFolders is readonly\n    config.watchFolders.push(path.join(require.resolve('metro-runtime/package.json'), '../..'));\n  }\n\n  // @ts-expect-error\n  config.transformer._expoRouterWebRendering = webOutput;\n  // @ts-expect-error: Invalidate the cache when the location of expo-router changes on-disk.\n  config.transformer._expoRouterPath = resolveFrom.silent(projectRoot, 'expo-router');\n\n  let tsconfig: null | TsConfigPaths = null;\n\n  if (isTsconfigPathsEnabled) {\n    tsconfig = await loadTsConfigPathsAsync(projectRoot);\n  }\n\n  await setupShimFiles(projectRoot);\n  await setupNodeExternals(projectRoot);\n\n  let expoConfigPlatforms = Object.entries(platformBundlers)\n    .filter(\n      ([platform, bundler]) => bundler === 'metro' && exp.platforms?.includes(platform as Platform)\n    )\n    .map(([platform]) => platform);\n\n  if (Array.isArray(config.resolver.platforms)) {\n    expoConfigPlatforms = [...new Set(expoConfigPlatforms.concat(config.resolver.platforms))];\n  }\n\n  // @ts-expect-error: typed as `readonly`.\n  config.resolver.platforms = expoConfigPlatforms;\n\n  config = withWebPolyfills(config);\n\n  return withExtendedResolver(config, {\n    tsconfig,\n    isExporting,\n    isTsconfigPathsEnabled,\n    isFastResolverEnabled,\n  });\n}\n\nfunction isDirectoryIn(a: string, b: string) {\n  return b.startsWith(a) && b.length > a.length;\n}\n"],"names":["getNodejsExtensions","withExtendedResolver","shouldAliasAssetRegistryForWeb","shouldAliasModule","withMetroMultiPlatformAsync","metroResolver","debug","require","withWebPolyfills","config","originalGetPolyfills","serializer","getPolyfills","bind","ctx","platform","path","join","projectRoot","EXTERNAL_REQUIRE_POLYFILL","polyfills","EXTERNAL_REQUIRE_NATIVE_POLYFILL","normalizeSlashes","p","replace","srcExts","mjsExts","filter","ext","test","nodejsSourceExtensions","jsIndex","reduce","index","i","splice","tsconfig","isTsconfigPathsEnabled","isFastResolverEnabled","isExporting","Log","warn","assetRegistryPath","fs","realpathSync","resolve","resolveFrom","defaultResolver","resolver","createFastResolver","preserveSymlinks","unstable_enableSymlinks","blockList","Array","isArray","aliases","web","universalAliases","silent","push","preferredMainFields","tsConfigResolve","paths","baseUrl","resolveWithTsConfigPaths","hasBaseUrl","isInteractive","configWatcher","FileNotifier","startObserving","loadTsConfigPathsAsync","then","tsConfigPaths","Object","keys","length","installExitHooks","stopObserving","shimsFolder","METRO_SHIMS_FOLDER","getStrictResolver","resolveRequest","context","doResolve","moduleName","getOptionalResolver","optionalResolve","error","isResolutionError","isFailedToResolveNameError","isFailedToResolvePathError","metroConfigWithCustomResolver","withMetroResolvers","originModulePath","moduleId","isNodeExternal","customResolverOptions","environment","result","type","redirectedModuleName","getNodeExternalModuleId","matcher","alias","match","aliasedModule","_","parseInt","filePath","includes","normalName","shimPath","existsSync","metroConfigWithCustomContext","withMetroMutatedResolverContext","immutableContext","preferNativePlatform","sourceExts","unstable_enablePackageExports","unstable_conditionNames","unstable_conditionsByPlatform","mainFields","env","EXPO_METRO_NO_MAIN_FIELD_OVERRIDE","withMetroErrorReportingResolver","endsWith","input","output","exp","platformBundlers","webOutput","process","EXPO_PUBLIC_PROJECT_ROOT","EXPO_PUBLIC_USE_STATIC","isDirectoryIn","__dirname","watchFolders","transformer","_expoRouterWebRendering","_expoRouterPath","setupShimFiles","setupNodeExternals","expoConfigPlatforms","entries","bundler","platforms","map","Set","concat","a","b","startsWith"],"mappings":"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"}